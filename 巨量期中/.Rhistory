summary(D)
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8); options(scipen=20, digits=4, width=90)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr)
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8); options(scipen=20, digits=4, width=90)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr)
A = read.csv("data/CPSData.csv")
MetroAreaMap = read.csv("data/MetroAreaCodes.csv")
CountryMap = read.csv("data/CountryCodes.csv")
nrow(A)
x = y <- 3
x
y
x <- y = 3
x <- y = 3
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 = as.Date(str2, format = "%Y-%m-%d")
date3 = as.Date(str3, format = "%d/%B/%Y")
format(date1, "%A")
format(date2, "%d")
format(date3, "%b %Y")
data(ncbirths)
data(ncbirths, package = "datasets")
format(ts,"%w") %>% table %>% sort
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8); options(scipen=20, digits=4, width=90)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr, d3heatmap)
D = read.csv("data/mvtWeek1.csv", stringsAsFactors=F)
nrow(D) #計算列數
head(D$Date)  # Month/Day/Year Hour:Minute ←字串向量
ts = as.POSIXct(D$Date, format="%m/%d/%y %H:%M") #轉成時間向量
par(cex=0.7)
hist(ts,"year",las=2,freq=T,xlab="")
table(format(ts,'%w'))
table(format(ts,'%m'))
table(weekday=format(ts,'%w'), month=format(ts,'%m'))
#library(dplyr)
#library(d3heatmap)
table(format(ts,"%u"), format(ts,"%H")) %>%
as.data.frame.matrix %>%
d3heatmap(F,F,col=colorRamp(c('seagreen','lightyellow','red')))
format(ts,"%w") %>% table %>% sort
format(ts,"%w") %>% table %>% sort %>% head
format(ts,"%w") %>% table %>% sort
ts[D$Arrest]
ts[D$Arrest] %>% format('%m') %>% table %>% sort
View(D)
View(X0)
View(A0)
load("data/tf0.rdata")
d0 = max(X0$date) + 1
B = X0 %>%
filter(date >= as.Date("2000-12-01")) %>%
mutate(days = as.integer(difftime(d0, date, units="days"))) %>%
group_by(cust) %>% summarise(
r = min(days),      # recency
s = max(days),      # seniority
f = n(),            # frquency
m = mean(total),    # monetary
rev = sum(total),   # total revenue contribution
raw = sum(gross),   # total gross profit contribution
age = age[1],       # age group
area = area[1],     # area code
) %>% data.frame      # 28584
pacman::p_load(dplyr,ggplot2,caTools)
rm(list=ls(all=TRUE))
load("data/tf3.rdata")
TR = subset(A, spl)
TS = subset(A, !spl)
# 所有可用X都丟進去
glm1 = glm(buy ~ ., TR[,c(2:9, 11)], family=binomial())
summary(glm1)
# 拿glm1模型對TS做預測
pred =  predict(glm1, TS, type="response")
cm = table(actual = TS$buy, predict = pred > 0.5); cm
acc.ts = cm %>% {sum(diag(.))/sum(.)} #混淆矩陣對角線相加除以整個矩陣，得到正確率
c(1-mean(TS$buy) , acc.ts)  # 不做模型，用平均機率去預測的準確率:1-{有買的人的比率(平均回購率)}，正確率:0.69998
# 可以看出做了模型後準確率提升至0.699
# 辨識率0.75
colAUC(pred, TS$buy)        # 0.7556
# 對金錢欄位取LOG
A2 = subset(A, A$buy) %>% mutate_at(c("m","rev","amount"), log10)
TR2 = subset(A2, spl2)
TS2 = subset(A2, !spl2)
lm1 = lm(amount ~ ., TR2[,c(2:6,8:10)])
summary(lm1)
# R square不高(不好)
r2.tr = summary(lm1)$r.sq
SST = sum((TS2$amount - mean(TR2$amount))^ 2)
SSE = sum((predict(lm1, TS2) -  TS2$amount)^2)
r2.ts = 1 - (SSE/SST)
c(R2train=r2.tr, R2test=r2.ts)
load("data/tf0.rdata")
d0 = max(X0$date) + 1
B = X0 %>%
filter(date >= as.Date("2000-12-01")) %>%
mutate(days = as.integer(difftime(d0, date, units="days"))) %>%
group_by(cust) %>% summarise(
r = min(days),      # recency
s = max(days),      # seniority
f = n(),            # frquency
m = mean(total),    # monetary
rev = sum(total),   # total revenue contribution
raw = sum(gross),   # total gross profit contribution
age = age[1],       # age group
area = area[1],     # area code
) %>% data.frame      # 28584
nrow(B)
B$Buy = predict(glm1, B, type="response")
View(TR2)
View(A2)
View(A)
View(A)
View(A0)
View(X0)
View(X0)
TR = subset(A, spl)
pacman::p_load(dplyr,ggplot2,caTools)
rm(list=ls(all=TRUE))
load("data/tf3.rdata")
TR = subset(A, spl)
TS = subset(A, !spl)
View(TR)
cls
clm
install.packages(c("epiDisplay", "expm", "ggplot2movies", "RMySQL"))
print("Hello R!")
num <- c(1,2,3,4,5) #use c() to create/combine vectors
####################
#### Unit 2 R codes
####################
rm(list = ls())
print("Hello R!")
v = 1:3
print("Hello R!")
num <- c(1,2,3,4,5) #use c() to create/combine vectors
i = 1
is.vector(num)
is.vector(i)
num + 1
sum(num)
pord(num)
prod(num)
sq = function(x) x^2
sq(2)
cube = function(x) x^3
cube(2)
func = function(f) f(2)
func(sq)
func(cube)
# R 語言任何一個操作都是 function call
1 + 2
"+"(1, 2)
1 * 3
"*"(1, 3)
## Operators
# From:To
v = 1:5
# Load all datasets and functions on the RStudio server
library(bigDataR)
v = 6:10
# Matrix Multiplication, dot and outer product
m1 = matrix(1:4, ncol = 2, byrow = T);m1
m1 * m1
m1 %*% m1
v = 1:3
v * v # scalar/cell product
v %*% v # dot product
v %o% v # outer product
outer(v, v, "*")
outer(v, v, FUN = "+")
outer(v, v, FUN = function(v1, v2) paste(v1, v2, sep ="---") )
m1 %*% m1
m1 %*% m1 %*% m1
library(expm)
m1 %^%  3
# Vector/Scalar AND and OR
T | F
c(F, T, T) | c(T, F, T)
c(F, T, T) || c(T, F, T)
# Short-circuit
x = 0
(x == 0) & (x <- x + 1)
(x == 0) & (x <- x + 1)
(x == 0) & (x <- x + 1)
(x == 0) && (x <- x + 1)
(x == 0) && (x <- x + 1)
(x == 0) || (x <- x + 1)
(x == 4) || (x <- x + 1)
(x == 4) || (x <- x + 1)
rm(ls())
rm(list = ls())
# %in%
'a' %in% letters
letters
# %in%
'a' %in% letters
c('a', 'b', '1') %in% letters
# Package::function() or Package::object
a = 1:5
mean = function(x) print("a function called \"mean\" ")
mean(a)
base::mean(a)
x = 3
is.vector(x)
is.numeric(x)
is.integer(x)
####################
#### Unit 2 R codes
####################
rm(list = ls())
x = 3
is.vector(3)
x = 3
is.vector(3) # R 最小單位 : vector
typeof(x)
mean(x = 1:10) # "=" is used as a function argument binding
mean(x <- 1:10) # "<-" is used as a variable assignment
mean(x = 1:10) # "=" is used as a function argument binding ( mean 的參數 x 為 1 : 10)
mean(x <- 1:10) # "<-" is used as a variable assignment (將 1 : 10 存入變數 x，並傳給 mean 的參數 x)
mean(x = x <- 1:10)
mean(x = x = 1:10) # "=" is used as a function argument binding ( mean 的參數 x 為 1 : 10)
mean(x = x <- 1:10)
v3 = vector(mode="character", length= 3)
v4 = vector(mode="logical", length= 2)
a = array(c(1,2,3,4,5,6), dim=c(1,2,3)) # 1 by 2 by 3
a
a = array(c(1,2,3,4,5,6), dim=c(1,2,3)) # 1 by 2 by 3
a
dim(a) # get the dimension of the array
dim(a) # get the dimension of the array
dim(a) # get the dimension of the array
v1 = c(9,8,7)
v2 = c("a","b","c")
#combine 2 vectors
d = data.frame(x1 = v1, x2 = v2, stringsAsFactors = F)
View(d)
str(d) # show the structure of the data frame “d”
# Using package "data.table"
library(data.table)
d_dt = data.table(d)
str(d_dt) # "data.table" is also a kind of data frame
# key-value pairs of data
L = list(k1 = c(9, 8, 7), k2 = c("a","b","c"), k3 = c(1))
L[1:2]
L
data.frame(L)
L$k1  # get the data in the list L with the key “k1”
L$k3
# 常用來表示 ordinal、nominal 變數
group = c("control", "treatment", "treatment", "control")
group
group_f = factor(group, levels=c("treatment", "control"))
group_f  # check the actual data type of “group_f”
typeof(group_f)
unclass(group_f) # remove class attributes to get real data values
unclass(group_f) # remove class attributes to get real data values
smoker = as.data.frame(smoker)
library('bigDataR')
library('bigDataR')
####################
#### Unit 2 R codes
####################
rm(list = ls())
library('bigDataR')
install.packages('bigDataR')
library('bigDataR')
library('bigDataR')
library('bigDataR')
a = c(1,2,3,4)
a
is.vector(a)
is.matrix(a)
m = as.matrix(a)
m
is.matrix(m)
t(m) # transpose the matrix
a
is.matrix(a)
m = as.matrix(a, byrow = T)
m
m = as.matrix(a, nrow = 1)
m
m = as.matrix(a, ncol = 4)
m
a = c(1,2,3,4)
m = as.matrix(a, ncol = 4)
m
a = c(1,2,3,4)
a
is.vector(a)
is.matrix(a)
m = as.matrix(a, ncol = 4)
m
is.matrix(m)
t(m) # transpose the matrix
m = as.matrix(a, ncol = 4, nrow = 1)
m
m = as.matrix(a, ncol = 2, nrow = 2)
m
a = c(1,2,3,4)
a
is.vector(a)
is.matrix(a)
m = as.matrix(a, ncol = 2, nrow = 2)
m
is.matrix(m)
t(m) # transpose the matrix
m = as.matrix(1:4, ncol = 2, nrow = 2)
m
m = as.matrix(1:4, ncol = 2, nrow = 2,byrow = T)
m
m = matrix(1:4, ncol = 2, nrow = 2,byrow = T)
m
m = matrix(a, nrow = 1,byrow = T)
m
m = as.matrix(a)
m
is.matrix(m)
t(m) # transpose the matrix
a = NA ; typeof(a)
a = NA ; typeof(a)
# NA : 存在但遺失，佔記憶體空間
a = NA ; typeof(a)
object.size(a) # get the object size (bytes) in memory
# NULL : 不存在，不佔記憶體空間
b = NULL; typeof(b)
object.size(b)
square = function(x = NULL){
return(ifelse(is.null(x), "NULL", x^2 ) );
}
# if x is not NULL, then output x squared.
square()
square(3)
x = 'global'
printXY = function(){
y = 'local';
print(x);
print(y);
}
printXY()
x
y
# assign a new string to x then print
x = 'global_x'
printX = function(x){
print(x); x = 'local_x'; print(x);
}
printX(x)
# Set operations, an R ellipsis example
setOper = function(f, ...){
el = list(...)
return(Reduce(f, el))
}
setOper(intersect, 1:5, 2:6, 3:5)
setOper(union, 1:5, 2:6, 3:5)
setOper(intersect, 1:5, 2:6, 3:5)
# Set operations, an R ellipsis example
setOper = function(f, ...){
print(..3)
el = list(...)
return(Reduce(f, el))
}
setOper(intersect, 1:5, 2:6, 3:5)
# A example of function factory
powFunc = function(n){
return(function(k) k^n)
}
square = powFunc(2)
square(3)
cube = powFunc(3)
cube(2)
powFunc(5)(2)
f = function(x){
if(x > 10){
print("x is great than 10");
} else if( x >=0 & x <=10) {
print("x is between 0 and 10");
} else {
print("x is less than 0");
}
}
f(-1)
f(5)
f(11)
library(ggplot2movies)
movies = as.data.frame(movies); movies$longshort = ""
View(movies)
movies$length > 120
# Very bad practice with for loop. Don't do this!
system.time({
for(i in 1:nrow(movies)){
if(movies[i, "length"] > 120) movies[i, "longshort"] = "long"
else movies[i, "longshort"] = "short" }
})
# Use ifelse() instead
system.time(
movies$longshort <- ifelse(movies$length > 120, "long", "short"))
# Or simply vectorized it!
system.time({
movies[movies$length > 120, "longshort"] = "long"
movies[movies$length <= 120, "longshort"] = "short"
})
for(i in c('a','b')) print(i)
for(k in 1:3) {
if(k == 3) break; print(k);
}
x = 3;
while(x > 0){
print(x);
x = x - 1;
}
switch(3, 'a' = {x = x + 5;},
'b' = {x = 999},'c' = {x = 'ABC'}
)
x # 2nd statement after expr
bmi_num = c(19,39,20,22,34,24);
bmi_cat = cut(x=bmi_num,breaks=c(0,18.5,24.9, 29.9, Inf),
labels=c('Underweight','Normal weight','Overweight','Obesity'));
bmi_cut_str = "lo:18.5 = 'Underweight';
18.5:24.9 = 'Normal weight';
24.9:29.9 = 'Overweight';
29.9:hi = 'Obesity'"
bmi_cat = car::recode(bmi_num, bmi_cut_str, as.factor = T,
levels = c('Underweight','Normal weight','Overweight','Obesity'))
table(bmi_cat)
xtabs(~ bmi_cat,  bmi_cat)
xtabs(~ bmi_cat)
xtabs(~ bmi_cat)
table(bmi_cat)
write.csv(as.data.frame(matrix(runif(10 ^ 6 ,0,1),  nrow=1000)), file='rnum.csv');
write.csv(as.data.frame(matrix(runif(10 ^ 6 ,0,1),  nrow=1000)), file='rnum.csv');
# An ~18 MB CSV file.
file.info("rnum.csv")$size; # get file size
system.time({rnum = read.csv(file= "rnum.csv", header=T)});
rm(rnum); library("data.table"); #load package data.table
system.time({ rnum = fread(input="rnum.csv")});
rm(rnum); library("sqldf"); # load package sqldf
system.time({ rnum = read.csv2.sql(file="rnum.csv", header=T,sep = ",");})
rm(rnum); library("sqldf"); # load package sqldf
system.time({ rnum = read.csv2.sql(file="rnum.csv", header=T,sep = ",");})
rm(rnum); library("data.table"); #load package data.table
system.time({ rnum = fread(input="rnum.csv")});
rm(rnum); library("data.table"); #load package data.table
system.time({ rnum = fread(input="rnum.csv")});
rm(rnum); library("sqldf"); # load package sqldf
system.time({ rnum = read.csv2.sql(file="rnum.csv", header=T,sep = ",");})
# rank by "mpg“ & create a new dataset
data.frame("car_name" = rownames(mtcars),
"mpg" = mtcars$mpg,
"rank" = rank(mtcars$mpg, ties.method = "first"))
rownames(mtcars)
mtcars
# rank by "mpg“ & create a new dataset
data.frame("car_name" = rownames(mtcars),
"mpg" = mtcars$mpg,
"rank" = rank(mtcars$mpg, ties.method = "first"))
# Pearson’s Correlation 是對連續並符合常態假設的資料進行相關分析的方法。
# Spearman’s Rank Correlation 是對連續但"不"符合常態假設的資料進行相關分析的方法。
# p value < 0.05, bmi and age are correlated
cor.test(insurance$bmi, insurance$age, method = "pearson")
cor.test(insurance$bmi, insurance$age, method = "spearman")
setwd("~/GitHub/bigdata_team_project/巨量期中")
# setwd("~/GitHub/bigdata_team_project/巨量期中")
rm(list=ls()) # clean env
pacman::p_load("data.table", "tidyverse", "sqldf", "jsonlite", "corrplot", "d3heatmap") # load packages
load("./pre_process.rdata") # load pre process data : youtube and mostViews
# category dataframe，新增類別資料框，針對類別作分析
C = group_by(mostViews, category) %>% summarise(likes = mean(likes), dislikes = mean(dislikes), comment_count = mean(comment_count), views = mean(views), trending_days = mean(trending_days))
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes +views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes +views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類別的影片總觀看數最多 : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(total_views = sum(views)) %>% ggplot(aes(x = reorder(category, total_views), y = total_views, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(engagement = sum(likes + dislikes + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(engagement = sum(likes + dislikes + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(engagement = sum(likes + dislikes + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 倒讚數 + 觀看數 + 評論數) : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(C, category) %>% summarise(engagement = sum(likes + dislikes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
