data.table::fread("./tea/profiles.csv")
(profiles = read.csv("./2020BAR/tea/profiles.csv") )
(profiles = read.csv("./ConjointApp/2020BAR/tea/profiles.csv") )
(profiles = read.csv("../tea/profiles.csv") )
(profiles = read.csv("//tea/profiles.csv") )
Sys.getlocale()
(profiles = read.csv("./tea/profiles.csv") )
data("mtcars")
View(X0)
View(Z)
View(Z0)
data("mtcars")
force(mtcars)
?mean
?lm
nrow(A)
top100 = data.table::fread("Top100.csv")
library(tidyverse)
airbnb = data.table::fread("AB_NYC_2019.csv")
vgsales = data.table::fread("my_vgsales.csv")
top100 = data.table::fread("Top100.csv")
sapply(airbnb, function(x) sum(is.na(x)))
na.omit(airbnb)
is.na(airbnb)
count(is.na(airbnb))
sum(is.na(airbnb))
sapply(airbnb, function(x) sum(is.na(x)))
na.omit(airbnb)
drop_na(airbnb)
library(tidyverse)
sapply(airbnb, function(x) sum(is.na(x)))
drop_na(airbnb)
na.omit(airbnb)
sum(is.na(airbnb))
a = na.omit(airbnb)
sum(is.na(a))
View(airbnb)
table(airbnb$neighbourhood_group, airbnb$room_type)
cor(airbnb$neighbourhood_group, airbnb$room_type)
cor(b)
b = table(airbnb$neighbourhood_group, airbnb$room_type)
cor(b)
table(airbnb$neighbourhood_group, airbnb$room_type)
cor(airbnb$neighbourhood_group, airbnb$room_type)
sapply(airbnb, function(x) sum(is.na(x)))
airbnb = na.omit(airbnb)
sum(is.na(a))
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10)
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10, sort = T)
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10)
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10) %>% arrange(total_price)
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10) %>% arrange(desc(total_price))
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10, total_price) %>% arrange(desc(total_price))
table(airbnb$neighbourhood_group, airbnb$room_type)
airbnb$room_type
table(airbnb$neighbourhood_group, airbnb$room_type)
table(airbnb$neighbourhood_group, airbnb$room_type)
my_vgsales = data.table::fread("my_vgsales.csv")
complete.cases(my_vgsales)
my_vgsales <- my_vgsales[complete.cases(my_vgsales), ]
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
my_vgsales = my_vgsales %>% mutate(global_sales=my_vgsales$NA_Sales+my_vgsales$JP_Sales+my_vgsales$EU_Sales+my_vgsales$Other_Sales)
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
table(my_vgsales$genre, my_vgsales$global_sales)
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
View(my_vgsales)
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = global_sales)
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales))
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales)
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
library(sqldf)
sqldf(
select *
from my_vgsales
)
sqldf(
"select *
from my_vgsales"
)
# 2.4
my_vgsales_top5 = my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
View(my_vgsales_top5)
sqldf(
"select *
from my_vgsales"
)
sqldf(
"select *
from my_vgsales_top5"
)
sqldf(
"select Name, SUM(global_sales)
from my_vgsales
Group by Name"
)
sqldf(
"select Name, SUM(Total_Sales = global_sales)
from my_vgsales
group by Name
order by "
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by "
)
sqldf(
"select Name, SUM(global_sales)
from my_vgsales"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group_by Name"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales"
)
sqldf(
"select Top 5 Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
Fetch First 10 Row Only"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
fetch first 10 row only"
)
sqldf(
"select top 5 Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
fetch first 10 row only"
)
sqldf(
"select top 5 (Name, SUM(global_sales) as Total_Sales)
from my_vgsales
group by Name
order by Total_Sales
fetch first 10 row only"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
fetch first 10 row only"
)
sqldf(
"select top 5 (Name, SUM(global_sales) as Total_Sales)
from my_vgsales
group by Name
order by Total_Sales"
)
sqldf(
"select top 5 Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by SUM(global_sales)"
)
sqldf(
"select top 5 *
from (select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)"
)
sqldf(
"select top 5 *
from sqldf(select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
where rownum <= 5"
)
sqldf(
"
select *
from sqldf(select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)
where rownum <= 5"
)
sqldf(
"select *
from sqldf(select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)
where rownum <= 5"
)
sqldf(
"select *
from (select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)
where rownum <= 5"
)
sqldf(
"select *
from (select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)
where ROWNUM <= 5"
)
sqldf(
"from sqldf(select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales)
desc limit 5"
)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
desc limit 5"
)
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
airbnb = data.table::fread("AB_NYC_2019.csv")
my_vgsales = data.table::fread("my_vgsales.csv")
top100 = data.table::fread("Top100.csv")
sapply(airbnb, function(x) sum(is.na(x)))
airbnb = na.omit(airbnb)
sum(is.na(a))
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10, total_price) %>% arrange(desc(total_price))
table(airbnb$neighbourhood_group, airbnb$room_type)
complete.cases(my_vgsales)
my_vgsales <- my_vgsales[complete.cases(my_vgsales), ]
my_vgsales = my_vgsales %>% mutate(global_sales=my_vgsales$NA_Sales+my_vgsales$JP_Sales+my_vgsales$EU_Sales+my_vgsales$Other_Sales)
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
library(sqldf)
sqldf(
"select Name, SUM(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
desc limit 5"
)
head(answer)
answer = my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
head(answer)
my_vgsales %>%  group_by(Genre) %>% summarise(n = nrow)
my_vgsales %>%  group_by(Genre) %>% summarise(n = nrow())
my_vgsales %>%  group_by(Genre) %>% summarise(n = n())
my_vgsales %>%  group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n))
complete.cases(my_vgsales)
my_vgsales <- my_vgsales[complete.cases(my_vgsales), ]
my_vgsales = my_vgsales %>% mutate(global_sales=my_vgsales$NA_Sales+my_vgsales$JP_Sales+my_vgsales$EU_Sales+my_vgsales$Other_Sales)
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
my_vgsales %>%  group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n))
my_vgsales %>%  group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n))
my_vgsales %>%  group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(5)
my_vgsales %>% filter(Publisher=="Nintendo") %>% group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(5)
my_vgsales %>% filter(Publisher == "Nintendo") %>% group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(5)
n(my_vgsales$Platform)
nrow(my_vgsales$Platform)
n(my_vgsales$Platform)
table(my_vgsales$Platform)
n(my_vgslaes)
#1.
#1.1
library("data.table")
library(dplyr)
airbnb = fread(input="/Users/killercrow/Downloads/AB_NYC_2019.csv")
sapply(airbnb, function(x) sum(is.na(x)))
airbnb = fread(input="/Users/killercrow/Downloads/AB_NYC_2019.csv")
sapply(airbnb, function(x) sum(is.na(x)))
#1.
#1.1
library("data.table")
library(dplyr)
airbnb = fread(input="/Users/killercrow/Downloads/AB_NYC_2019.csv")
sapply(airbnb, function(x) sum(is.na(x)))
airbnb = fread(input="/Users/killercrow/Downloads/AB_NYC_2019.csv")
sapply(airbnb, function(x) sum(is.na(x)))
#1.
#1.1
library("data.table")
library(dplyr)
airbnb = fread(input="AB_NYC_2019.csv")
sapply(airbnb, function(x) sum(is.na(x)))
#last_review = 9936
#reviews_per_month = 9936
airbnb = na.omit(airbnb)
#1.2
airbnb %>%
group_by(host_id) %>%
summarise(total_price = sum(price)) %>%
top_n(10, total_price) %>%
arrange(desc(total_price))
#1.3
table(airbnb$neighbourhood_group, airbnb$room_type)
chisq.test(table(airbnb$neighbourhood_group, airbnb$room_type))
#2
my_vgsales = fread(input="my_vgsales.csv")
library(sqldf)
#2.1
complete.cases(my_vgsales)
my_vgsales <- my_vgsales[complete.cases(my_vgsales), ]
#2.2
my_vgsales = my_vgsales %>% mutate(global_sales=my_vgsales$NA_Sales+my_vgsales$JP_Sales+my_vgsales$EU_Sales+my_vgsales$Other_Sales)
#2.3
my_vgsales %>% filter(Publisher == "Nintendo") %>% group_by(Genre)
#2.4.1
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
#2.4.2
data1 = sqldf('select Name, sum(global_sales) as Total_Sales from my_vgsales GROUP BY Name Order BY Total_Sales DESC Limit 5', row.names=T)
data1
#2.5.1
#蝜芸??之??????耦
ggplot(my_vgsales, aes(x = my_vgsales$NA_Sales)) + geom_density(alpha = 0.3) +xlim(-1,1)
ggplot(my_vgsales, aes(x = my_vgsales$EU_Sales)) + geom_density(alpha = 0.3) +xlim(-1,1)
#2.3
my_vgsales %>% filter(Publisher == "Nintendo") %>% group_by(Genre)
#1.3
table(airbnb$neighbourhood_group, airbnb$room_type)
chisq.test(table(airbnb$neighbourhood_group, airbnb$room_type))
#2.5.1
#蝜芸??之??????耦
ggplot(my_vgsales, aes(x = my_vgsales$NA_Sales)) + geom_density(alpha = 0.3) +xlim(-1,1)
ggplot(my_vgsales, aes(x = my_vgsales$EU_Sales)) + geom_density(alpha = 0.3) +xlim(-1,1)
ad.test(my_vgsales$NA_Sales)
ad.test(my_vgsales$EU_Sales)
##??絲靘??虜???
#?瑼Ｗ??撘摰?
library(nortest)
ad.test(my_vgsales$NA_Sales)
ad.test(my_vgsales$EU_Sales)
lillie.test(my_vgsales$NA_Sales)
lillie.test(my_vgsales$EU_Sales)
#2.5.2
#????頧??actor
op100$Area = factor(Top100$Area)
#2.5.2
#????頧??actor
Top100$Area = factor(Top100$Area)
Top100$Genre = factor(Top100$Genre)
#1.
#1.1
library("data.table")
library(dplyr)
airbnb = fread(input="/Users/killercrow/Downloads/AB_NYC_2019.csv")
sapply(AB_NYC_2019, function(x) sum(is.na(x)))
#?????ol,global sales 撠????????um韏瑚??
#2.3
my_vgsales %>% filter(Publisher == "Nintendo") %>% group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(5)
library(tidyverse)
airbnb = data.table::fread("AB_NYC_2019.csv")
my_vgsales = data.table::fread("my_vgsales.csv")
top100 = data.table::fread("Top100.csv")
sapply(airbnb, function(x) sum(is.na(x)))
airbnb = na.omit(airbnb)
sum(is.na(a))
airbnb %>% group_by(host_id) %>% summarise(total_price = sum(price)) %>% top_n(10, total_price) %>% arrange(desc(total_price))
# 1.3
neighbour_type = table(airbnb$neighbourhood_group, airbnb$room_type)
chisq.test(neighbour_type)
# 1.3
neighbour_type = table(airbnb$neighbourhood_group, airbnb$room_type)
neighbour_type
# 1.1
sapply(airbnb, function(x) sum(is.na(x)))
chisq.test(neighbour_type)
# 1.1
sapply(airbnb, ifelse(is.na(), 1, 0))
# 2.1
game_sales = na.omit(my_vgsales)
# team member solution
complete.cases(my_vgsales)
my_vgsales <- my_vgsales[complete.cases(my_vgsales), ]
my_vgsales = my_vgsales %>% mutate(global_sales=my_vgsales$NA_Sales+my_vgsales$JP_Sales+my_vgsales$EU_Sales+my_vgsales$Other_Sales)
my_vgsales %>%  group_by(Genre) %>% arrange(desc(global_sales))
# 2.4
my_vgsales %>% group_by(Name) %>% summarise(Total_Sales = sum(global_sales)) %>% top_n(5, Total_Sales) %>% arrange(desc(Total_Sales))
my_vgsales %>% filter(Publisher == "Nintendo") %>% group_by(Genre) %>% summarise(n = n()) %>% arrange(desc(n)) %>% head(5)
sqldf(
"select Name, sum(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
desc limit 5"
)
sqldf::sqldf(
"select Name, sum(global_sales) as Total_Sales
from my_vgsales
group by Name
order by Total_Sales
desc limit 5"
)
MASS
library("MASS")
MASS::UScrime
UScrime = MASS::UScrime
library("MASS", tidyverse)
UScrime = MASS::UScrime
ggplot(UScrime, aes(x = UScrime$prob, fill = factor(UScrime$So))) + geom_density(alpha = .3)
ggplot(UScrime, aes(x = prob, fill = factor(So))) + geom_density(alpha = .3)
UScrime = MASS::UScrime
UScrime
ggplot(UScrime, aes(x = Prob, fill = factor(So))) + geom_density(alpha = .3)
t.test(formula = Prob - So, data = UScrime)
t.test(formula = Prob - So, data = UScrime)
mltools:::one_hot
install.packages("mltools")
mltools:::one_hot
data <- data.frame(
Outcome = seq(1,100,by=1),
Variable = sample(c("Red","Green","Blue"), 100, replace = TRUE)
)
View(data)
mtools::one_hot(data)
mltools::one_hot(data)
mltools::one_hot(as.data.table(data))
library("data.table")
library(data.table)
mltools::one_hot(as.data.table(data))
mltools:::one_hot
dt = data
cols <- colnames(dt)[which(sapply(dt, function(x) is.factor(x) & !is.ordered(x)))]
cols
colnames(dt)[which(sapply(dt, function(x) is.factor(x) & !is.ordered(x)))]
setwd("C:/Users/user/bigdata_team_project/巨量期中")
# setwd("~/GitHub/bigdata_team_project/巨量期中")
rm(list=ls()) # clean env
pacman::p_load("data.table", "tidyverse", "sqldf", "jsonlite", "corrplot", "d3heatmap") # load packages
yt = read_csv("./USvideos.csv") # read csv
cat("開始日期:", min(yt$trending_date), "結束日期:", max(yt$trending_date))
sapply(yt, function(x) sum(ifelse(is.na(x), 1, 0))) # check NA，discription 有 NA
yt[is.na(yt)] = "" # fill NA，將 discription NA 填為空字串
# load category JSON file，讀取類別 JSON 檔
cjson = fromJSON("./US_category_id.json"); cid = cjson$items$id; ctable = as.data.frame(cid); ctable$category = cjson$items$snippet$title
# add category name to youtube data frame，新增類別名稱欄位
youtube = merge(yt, ctable, by.x = "category_id", by.y = "cid")
# trending_date to Date type，資料型態轉換
youtube$trending_date = as.Date(youtube$trending_date, format = "%y.%d.%m")
# remove 清理環境
rm(list=c("cjson", "ctable", "yt", "cid"))
# add trending_days column，新增每部影片上幾天熱門的欄位
youtube = group_by(youtube, video_id) %>% mutate(trending_days = n())
# most views of each video，將每部影片最終的資料獨立出來，避免重複統計。
mostViews = group_by(youtube, video_id) %>% filter(views == max(views))
# category dataframe，新增類別資料框，針對類別作分析
C = group_by(mostViews, category) %>% summarise(likes = mean(likes), dislikes = mean(dislikes), comment_count = mean(comment_count), views = mean(views), trending_days = mean(trending_days))
### 單變數分析
# 什麼類別的影片上熱門的次數最多 : Entertainment、Music、Howto & Style、Comedy、People & Blogs
# Entertainment 上發燒影片最多次，且差距很大，娛樂是觀眾接受度最高且熱度最高的類別。
group_by(youtube, category) %>% summarise(n = n()) %>% arrange(desc(n)) %>% ggplot(aes(x = reorder(category, n), y = n, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類別的影片總觀看數最多 : Music、Entertainment、Film & Animation、Comedy、People & Blogs
group_by(mostViews, category) %>% summarise(total_views = sum(views)) %>% ggplot(aes(x = reorder(category, total_views), y = total_views, fill = category)) + geom_bar(stat = "identity") + coord_flip()
# 什麼類型的影片觀眾參與度最高(喜歡數 + 觀看數 + 評論數) : Music、Entertainment、Comedy、People & Blogs、Howto & Style
group_by(mostViews, category) %>% summarise(engagement = sum(likes + views + comment_count)) %>% arrange(desc(engagement)) %>% ggplot(aes(x = reorder(category, engagement), y = engagement, fill = category)) + geom_bar(stat = "identity") + coord_flip()
